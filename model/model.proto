syntax = "proto3";

package model;

//All further references to "UUID" are defined to mean a type 1 (time+MAC) UUID

//This service is meant for Client --> Master communication.
service Master {
    rpc InitiateFileUpload (FileUploadRequest) returns (FileUploadResponse);
    rpc InitiateFileRead (FileReadRequest) returns (FileReadResponse);
}

//This service is meant for Client --> Minion communication.
service Minion {
    rpc UploadFile (stream UploadRequest) returns (DataHash);
    rpc DownloadFile (DownloadRequest) returns (stream FileChunk);
}

//This service is meant for Master --> Minion communication.
service MasterToMinion {
    rpc Allocate (AllocationRequest) returns (AllocationResponse);
}

enum HashType {
    STRLEN = 0; //https://news-web.php.net/php.internals/70691
    SHA1 = 1;
    SHA256 = 2;
}

message DataHash {
    HashType type = 1;
    string hexHash = 2;
}

message FileChunk {
    bytes content = 1;
}

//FileUploadRequest - Represents an upload request that is sent to the master.
message FileUploadRequest {
    string fileName = 1;
    int64 fileSize = 2;
}

//FileUploadResp - A response from the master about a file upload request.
message FileUploadResponse {
    string UUID = 1;
    string empoweredMinionIp = 2;
}

message FileReadRequest {
    string UUID = 1;
}

message FileReadResponse {
    string minionServerIp = 1;
    DataHash hash = 2;
}

message UploadRequest {
    oneof data {
        FileChunk chunk = 1;
        string UUID = 2;
    }
}

message DownloadRequest {
    string UUID = 1;
}

message AllocationRequest {
    //For categorization
    string UUID = 1;
    uint64 fileSize = 2;
}

message AllocationResponse {
    //allocated is "true" if space has been allocated for the UUID in the minion.
    bool allocated = 1;
    //availableSpace is the current available space if allocated is false, and the space after the allocation otherwise.
    uint64 availableSpace = 2;
}
