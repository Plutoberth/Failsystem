syntax = "proto3";

package model;

//All further references to "UUID" are defined to mean a type 1 (time+MAC) UUID

//This service is meant for Client --> Master communication.
service Master {
    rpc InitiateFileUpload (FileUploadRequest) returns (FileUploadResponse);
    rpc InitiateFileRead (FileReadRequest) returns (FileReadResponse);
    rpc ListFiles(ListFilesRequest) returns (ListFilesResponse);
}

//This service is meant for (Client || Minion) --> Minion communication.
//i.e. Internally, the minion should detect whether this is as a part of an empowerment or
service Minion {
    rpc UploadFile (stream UploadRequest) returns (DataHash);
    rpc DownloadFile (DownloadRequest) returns (stream FileChunk);
}

//This service is meant for Master --> Minion communication.
service MasterToMinion {
    rpc Allocate (AllocationRequest) returns (AllocationResponse);
    rpc Empower (EmpowermentRequest) returns (EmpowermentResponse);
}

service MinionToMaster {
    //Announce the Minion's existence to the Master.
    rpc Announce(Announcement) returns (AnnounceResponse);
    //Beat periodically to indicate that the minion is still alive.
    rpc Beat(Heartbeat) returns (HeartBeatResponse);
    //Called by the minion to finalize an upload after it finishes replicating it.
    rpc FinalizeUpload (FinalizeUploadRequest) returns (FinalizeUploadResponse);
}

enum HashType {
    STRLEN = 0; //https://news-web.php.net/php.internals/70691
    SHA1 = 1;
    SHA256 = 2;
}

message DataHash {
    HashType type = 1;
    string hexHash = 2;
}

message FileChunk {
    bytes content = 1;
}

//FileUploadRequest - Represents an upload request that is sent to the master.
message FileUploadRequest {
    string fileName = 1;
    int64 fileSize = 2;
}

//FileUploadResp - A response from the master about a file upload request.
message FileUploadResponse {
    string UUID = 1;
    string empoweredMinionIp = 2;
}

message FileReadRequest {
    string UUID = 1;
}

message FileReadResponse {
    string minionServerIp = 1;
    DataHash hash = 2;
}

message UploadRequest {
    oneof data {
        FileChunk chunk = 1;
        string UUID = 2;
    }
}

message DownloadRequest {
    string UUID = 1;
}

message AllocationRequest {
    //For categorization
    string UUID = 1;
    int64 fileSize = 2;
}

message AllocationResponse {
    //allocated is "true" if space has been allocated for the UUID in the minion.
    bool allocated = 1;
    //availableSpace is the current available space if allocated is false, and the space after the allocation otherwise.
    int64 availableSpace = 2;
}

message EmpowermentRequest {
    //The UUID of the file that the server should be empowered for.
    string UUID = 1;
    //Servers that are ready to accept file writes using the mutual minion interface
    repeated string subordinates = 2;
}

message EmpowermentResponse {
    //Left empty for now. If the UUID to empower was not found, the minion should respond with an error.
}

message FileEntry {
    string UUID = 1;
    int64 fileSize = 2;
    //Possibly introduce DataHash later if you want to ¯\_(ツ)_/¯
    //DataHash hash = 3;
}

message Announcement {
    //UUID of the minion server
    string UUID = 1;
    repeated FileEntry entries = 2;
    int64 availableSpace = 3;
    int32 port = 4;
}

message AnnounceResponse {}

message Heartbeat {
    //UUID of the minion server
    string UUID = 1;
    int64 availableSpace = 2;
    int32 port = 3;
}

message HeartBeatResponse {}

message FinalizeUploadRequest {
    string serverUUID = 1;
    string fileUUID = 2;
    DataHash hash = 3;
}

message FinalizeUploadResponse {}

message ListFilesRequest {}

message MasterFileEntry {
    string UUID = 1;
    string Name = 2;
    string Size = 3;
}

message ListFilesResponse {
    repeated MasterFileEntry entries = 1;
}